// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: schema/definitions.capnp

pub mod tx {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_commit_l_s_n(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn get_records(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::schema::definitions_capnp::tx::record::Owned>,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_records(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_commit_l_s_n(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_commit_l_s_n(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
        #[inline]
        pub fn get_records(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::schema::definitions_capnp::tx::record::Owned>,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_records(
            &mut self,
            value: ::capnp::struct_list::Reader<
                'a,
                crate::schema::definitions_capnp::tx::record::Owned,
            >,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_records(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::schema::definitions_capnp::tx::record::Owned>
        {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_records(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 56] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(95, 249, 117, 29, 7, 93, 19, 233),
            ::capnp::word(25, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(219, 231, 182, 117, 39, 218, 73, 140),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 226, 0, 0, 0),
            ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
            ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
            ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
            ::capnp::word(58, 84, 120, 0, 0, 0, 0, 0),
            ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(72, 250, 180, 76, 230, 36, 250, 173),
            ::capnp::word(1, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(82, 101, 99, 111, 114, 100, 0, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 82, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(49, 0, 0, 0, 66, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(44, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(72, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(99, 111, 109, 109, 105, 116, 76, 83),
            ::capnp::word(78, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(114, 101, 99, 111, 114, 100, 115, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(72, 250, 180, 76, 230, 36, 250, 173),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                1 => <::capnp::struct_list::Owned<
                    crate::schema::definitions_capnp::tx::record::Owned,
                > as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xe913_5d07_1d75_f95f;
    }

    pub mod record {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::introspect::Introspect for Owned {
            fn introspect() -> ::capnp::introspect::Type {
                ::capnp::introspect::TypeVariant::Struct(
                    ::capnp::introspect::RawBrandedStructSchema {
                        generic: &_private::RAW_SCHEMA,
                        field_types: _private::get_field_types,
                        annotation_types: _private::get_annotation_types,
                    },
                )
                .into()
            }
        }
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }
        impl<'a> ::core::marker::Copy for Reader<'a> {}
        impl<'a> ::core::clone::Clone for Reader<'a> {
            fn clone(&self) -> Self {
                *self
            }
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
            fn from(reader: Reader<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Reader::new(
                    reader.reader,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        impl<'a> ::core::fmt::Debug for Reader<'a> {
            fn fmt(
                &self,
                f: &mut ::core::fmt::Formatter<'_>,
            ) -> ::core::result::Result<(), ::core::fmt::Error> {
                core::fmt::Debug::fmt(
                    &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                    f,
                )
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_action(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_action(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn get_timestamp(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_timestamp(&self) -> bool {
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn get_schema(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(2),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_schema(&self) -> bool {
                !self.reader.get_pointer_field(2).is_null()
            }
            #[inline]
            pub fn get_table(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(3),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_table(&self) -> bool {
                !self.reader.get_pointer_field(3).is_null()
            }
            #[inline]
            pub fn get_columns(
                self,
            ) -> ::capnp::Result<
                ::capnp::struct_list::Reader<
                    'a,
                    crate::schema::definitions_capnp::tx::record::column::Owned,
                >,
            > {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(4),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_columns(&self) -> bool {
                !self.reader.get_pointer_field(4).is_null()
            }
            #[inline]
            pub fn get_primary_key(
                self,
            ) -> ::capnp::Result<
                ::capnp::struct_list::Reader<
                    'a,
                    crate::schema::definitions_capnp::tx::record::primary_key::Owned,
                >,
            > {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(5),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_primary_key(&self) -> bool {
                !self.reader.get_pointer_field(5).is_null()
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 0,
                    pointers: 6,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
            fn from(builder: Builder<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Builder::new(
                    builder.builder,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_action(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_action(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_action(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_action(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn get_timestamp(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_timestamp(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_timestamp(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_timestamp(&self) -> bool {
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn get_schema(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(2),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_schema(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(2).set_text(value);
            }
            #[inline]
            pub fn init_schema(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(2).init_text(size)
            }
            #[inline]
            pub fn has_schema(&self) -> bool {
                !self.builder.is_pointer_field_null(2)
            }
            #[inline]
            pub fn get_table(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(3),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_table(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(3).set_text(value);
            }
            #[inline]
            pub fn init_table(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(3).init_text(size)
            }
            #[inline]
            pub fn has_table(&self) -> bool {
                !self.builder.is_pointer_field_null(3)
            }
            #[inline]
            pub fn get_columns(
                self,
            ) -> ::capnp::Result<
                ::capnp::struct_list::Builder<
                    'a,
                    crate::schema::definitions_capnp::tx::record::column::Owned,
                >,
            > {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(4),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_columns(
                &mut self,
                value: ::capnp::struct_list::Reader<
                    'a,
                    crate::schema::definitions_capnp::tx::record::column::Owned,
                >,
            ) -> ::capnp::Result<()> {
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(4),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_columns(
                self,
                size: u32,
            ) -> ::capnp::struct_list::Builder<
                'a,
                crate::schema::definitions_capnp::tx::record::column::Owned,
            > {
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(4),
                    size,
                )
            }
            #[inline]
            pub fn has_columns(&self) -> bool {
                !self.builder.is_pointer_field_null(4)
            }
            #[inline]
            pub fn get_primary_key(
                self,
            ) -> ::capnp::Result<
                ::capnp::struct_list::Builder<
                    'a,
                    crate::schema::definitions_capnp::tx::record::primary_key::Owned,
                >,
            > {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(5),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_primary_key(
                &mut self,
                value: ::capnp::struct_list::Reader<
                    'a,
                    crate::schema::definitions_capnp::tx::record::primary_key::Owned,
                >,
            ) -> ::capnp::Result<()> {
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(5),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_primary_key(
                self,
                size: u32,
            ) -> ::capnp::struct_list::Builder<
                'a,
                crate::schema::definitions_capnp::tx::record::primary_key::Owned,
            > {
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(5),
                    size,
                )
            }
            #[inline]
            pub fn has_primary_key(&self) -> bool {
                !self.builder.is_pointer_field_null(5)
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub static ENCODED_NODE: [::capnp::Word; 126] = [
                ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
                ::capnp::word(72, 250, 180, 76, 230, 36, 250, 173),
                ::capnp::word(28, 0, 0, 0, 1, 0, 0, 0),
                ::capnp::word(95, 249, 117, 29, 7, 93, 19, 233),
                ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
                ::capnp::word(37, 0, 0, 0, 39, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(61, 0, 0, 0, 87, 1, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
                ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
                ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
                ::capnp::word(58, 84, 120, 46, 82, 101, 99, 111),
                ::capnp::word(114, 100, 0, 0, 0, 0, 0, 0),
                ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
                ::capnp::word(252, 136, 89, 194, 76, 213, 240, 218),
                ::capnp::word(9, 0, 0, 0, 58, 0, 0, 0),
                ::capnp::word(159, 234, 192, 22, 67, 0, 34, 151),
                ::capnp::word(5, 0, 0, 0, 90, 0, 0, 0),
                ::capnp::word(67, 111, 108, 117, 109, 110, 0, 0),
                ::capnp::word(80, 114, 105, 109, 97, 114, 121, 75),
                ::capnp::word(101, 121, 0, 0, 0, 0, 0, 0),
                ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(153, 0, 0, 0, 58, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(157, 0, 0, 0, 82, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(165, 0, 0, 0, 58, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(169, 0, 0, 0, 50, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(164, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(176, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(173, 0, 0, 0, 66, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(193, 0, 0, 0, 90, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(192, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(97, 99, 116, 105, 111, 110, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
                ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(115, 99, 104, 101, 109, 97, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(116, 97, 98, 108, 101, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(99, 111, 108, 117, 109, 110, 115, 0),
                ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(252, 136, 89, 194, 76, 213, 240, 218),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(112, 114, 105, 109, 97, 114, 121, 75),
                ::capnp::word(101, 121, 0, 0, 0, 0, 0, 0),
                ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(159, 234, 192, 22, 67, 0, 34, 151),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ];
            pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
                match index {
                    0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    3 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    4 => <::capnp::struct_list::Owned<
                        crate::schema::definitions_capnp::tx::record::column::Owned,
                    > as ::capnp::introspect::Introspect>::introspect(),
                    5 => <::capnp::struct_list::Owned<
                        crate::schema::definitions_capnp::tx::record::primary_key::Owned,
                    > as ::capnp::introspect::Introspect>::introspect(),
                    _ => panic!("invalid field index {}", index),
                }
            }
            pub fn get_annotation_types(
                child_index: Option<u16>,
                index: u32,
            ) -> ::capnp::introspect::Type {
                panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
            }
            pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
                ::capnp::introspect::RawStructSchema {
                    encoded_node: &ENCODED_NODE,
                    nonunion_members: NONUNION_MEMBERS,
                    members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
                };
            pub static NONUNION_MEMBERS: &[u16] = &[0, 1, 2, 3, 4, 5];
            pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
            pub const TYPE_ID: u64 = 0xadfa_24e6_4cb4_fa48;
        }

        pub mod column {
            #[derive(Copy, Clone)]
            pub struct Owned(());
            impl ::capnp::introspect::Introspect for Owned {
                fn introspect() -> ::capnp::introspect::Type {
                    ::capnp::introspect::TypeVariant::Struct(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    )
                    .into()
                }
            }
            impl ::capnp::traits::Owned for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::OwnedStruct for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::Pipelined for Owned {
                type Pipeline = Pipeline;
            }

            pub struct Reader<'a> {
                reader: ::capnp::private::layout::StructReader<'a>,
            }
            impl<'a> ::core::marker::Copy for Reader<'a> {}
            impl<'a> ::core::clone::Clone for Reader<'a> {
                fn clone(&self) -> Self {
                    *self
                }
            }

            impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                    Self { reader }
                }
            }

            impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
                fn from(reader: Reader<'a>) -> Self {
                    Self::Struct(::capnp::dynamic_struct::Reader::new(
                        reader.reader,
                        ::capnp::schema::StructSchema::new(
                            ::capnp::introspect::RawBrandedStructSchema {
                                generic: &_private::RAW_SCHEMA,
                                field_types: _private::get_field_types,
                                annotation_types: _private::get_annotation_types,
                            },
                        ),
                    ))
                }
            }

            impl<'a> ::core::fmt::Debug for Reader<'a> {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::result::Result<(), ::core::fmt::Error> {
                    core::fmt::Debug::fmt(
                        &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                        f,
                    )
                }
            }

            impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                fn get_from_pointer(
                    reader: &::capnp::private::layout::PointerReader<'a>,
                    default: ::core::option::Option<&'a [::capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(reader.get_struct(default)?.into())
                }
            }

            impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                    self.reader
                }
            }

            impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                    self.reader
                        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                }
            }

            impl<'a> Reader<'a> {
                pub fn reborrow(&self) -> Reader<'_> {
                    Self { ..*self }
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.reader.total_size()
                }
                #[inline]
                pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(0),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_name(&self) -> bool {
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn get_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_type(&self) -> bool {
                    !self.reader.get_pointer_field(1).is_null()
                }
                #[inline]
                pub fn get_value(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(2),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_value(&self) -> bool {
                    !self.reader.get_pointer_field(2).is_null()
                }
            }

            pub struct Builder<'a> {
                builder: ::capnp::private::layout::StructBuilder<'a>,
            }
            impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                    ::capnp::private::layout::StructSize {
                        data: 0,
                        pointers: 3,
                    };
            }
            impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                    Self { builder }
                }
            }

            impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
                fn from(builder: Builder<'a>) -> Self {
                    Self::Struct(::capnp::dynamic_struct::Builder::new(
                        builder.builder,
                        ::capnp::schema::StructSchema::new(
                            ::capnp::introspect::RawBrandedStructSchema {
                                generic: &_private::RAW_SCHEMA,
                                field_types: _private::get_field_types,
                                annotation_types: _private::get_annotation_types,
                            },
                        ),
                    ))
                }
            }

            impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                    self.builder
                        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                }
            }

            impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                fn init_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    _size: u32,
                ) -> Self {
                    builder
                        .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                        .into()
                }
                fn get_from_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    default: ::core::option::Option<&'a [::capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(
                        builder
                            .get_struct(
                                <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                default,
                            )?
                            .into(),
                    )
                }
            }

            impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                fn set_pointer_builder(
                    mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                    value: Self,
                    canonicalize: bool,
                ) -> ::capnp::Result<()> {
                    pointer.set_struct(&value.reader, canonicalize)
                }
            }

            impl<'a> Builder<'a> {
                pub fn into_reader(self) -> Reader<'a> {
                    self.builder.into_reader().into()
                }
                pub fn reborrow(&mut self) -> Builder<'_> {
                    Builder {
                        builder: self.builder.reborrow(),
                    }
                }
                pub fn reborrow_as_reader(&self) -> Reader<'_> {
                    self.builder.as_reader().into()
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.builder.as_reader().total_size()
                }
                #[inline]
                pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(0),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_name(&self) -> bool {
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn get_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_type(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(1).set_text(value);
                }
                #[inline]
                pub fn init_type(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.get_pointer_field(1).init_text(size)
                }
                #[inline]
                pub fn has_type(&self) -> bool {
                    !self.builder.is_pointer_field_null(1)
                }
                #[inline]
                pub fn get_value(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(2),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_value(&mut self, value: ::capnp::data::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(2).set_data(value);
                }
                #[inline]
                pub fn init_value(self, size: u32) -> ::capnp::data::Builder<'a> {
                    self.builder.get_pointer_field(2).init_data(size)
                }
                #[inline]
                pub fn has_value(&self) -> bool {
                    !self.builder.is_pointer_field_null(2)
                }
            }

            pub struct Pipeline {
                _typeless: ::capnp::any_pointer::Pipeline,
            }
            impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                    Self {
                        _typeless: typeless,
                    }
                }
            }
            impl Pipeline {}
            mod _private {
                pub static ENCODED_NODE: [::capnp::Word; 65] = [
                    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
                    ::capnp::word(252, 136, 89, 194, 76, 213, 240, 218),
                    ::capnp::word(35, 0, 0, 0, 1, 0, 0, 0),
                    ::capnp::word(72, 250, 180, 76, 230, 36, 250, 173),
                    ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(21, 0, 0, 0, 82, 1, 0, 0),
                    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(37, 0, 0, 0, 175, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
                    ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
                    ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
                    ::capnp::word(58, 84, 120, 46, 82, 101, 99, 111),
                    ::capnp::word(114, 100, 46, 67, 111, 108, 117, 109),
                    ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
                    ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(69, 0, 0, 0, 42, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
                    ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
                    ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
                    ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(73, 0, 0, 0, 42, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
                    ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
                    ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
                    ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(77, 0, 0, 0, 50, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
                    ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
                    ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(118, 97, 108, 117, 101, 0, 0, 0),
                    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ];
                pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
                    match index {
                        0 => {
                            <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect()
                        }
                        1 => {
                            <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect()
                        }
                        2 => {
                            <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect()
                        }
                        _ => panic!("invalid field index {}", index),
                    }
                }
                pub fn get_annotation_types(
                    child_index: Option<u16>,
                    index: u32,
                ) -> ::capnp::introspect::Type {
                    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
                }
                pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
                    ::capnp::introspect::RawStructSchema {
                        encoded_node: &ENCODED_NODE,
                        nonunion_members: NONUNION_MEMBERS,
                        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
                    };
                pub static NONUNION_MEMBERS: &[u16] = &[0, 1, 2];
                pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
                pub const TYPE_ID: u64 = 0xdaf0_d54c_c259_88fc;
            }
        }

        pub mod primary_key {
            #[derive(Copy, Clone)]
            pub struct Owned(());
            impl ::capnp::introspect::Introspect for Owned {
                fn introspect() -> ::capnp::introspect::Type {
                    ::capnp::introspect::TypeVariant::Struct(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    )
                    .into()
                }
            }
            impl ::capnp::traits::Owned for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::OwnedStruct for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::Pipelined for Owned {
                type Pipeline = Pipeline;
            }

            pub struct Reader<'a> {
                reader: ::capnp::private::layout::StructReader<'a>,
            }
            impl<'a> ::core::marker::Copy for Reader<'a> {}
            impl<'a> ::core::clone::Clone for Reader<'a> {
                fn clone(&self) -> Self {
                    *self
                }
            }

            impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                    Self { reader }
                }
            }

            impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
                fn from(reader: Reader<'a>) -> Self {
                    Self::Struct(::capnp::dynamic_struct::Reader::new(
                        reader.reader,
                        ::capnp::schema::StructSchema::new(
                            ::capnp::introspect::RawBrandedStructSchema {
                                generic: &_private::RAW_SCHEMA,
                                field_types: _private::get_field_types,
                                annotation_types: _private::get_annotation_types,
                            },
                        ),
                    ))
                }
            }

            impl<'a> ::core::fmt::Debug for Reader<'a> {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::result::Result<(), ::core::fmt::Error> {
                    core::fmt::Debug::fmt(
                        &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                        f,
                    )
                }
            }

            impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                fn get_from_pointer(
                    reader: &::capnp::private::layout::PointerReader<'a>,
                    default: ::core::option::Option<&'a [::capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(reader.get_struct(default)?.into())
                }
            }

            impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                    self.reader
                }
            }

            impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                    self.reader
                        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                }
            }

            impl<'a> Reader<'a> {
                pub fn reborrow(&self) -> Reader<'_> {
                    Self { ..*self }
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.reader.total_size()
                }
                #[inline]
                pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(0),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_name(&self) -> bool {
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn get_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_type(&self) -> bool {
                    !self.reader.get_pointer_field(1).is_null()
                }
            }

            pub struct Builder<'a> {
                builder: ::capnp::private::layout::StructBuilder<'a>,
            }
            impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                    ::capnp::private::layout::StructSize {
                        data: 0,
                        pointers: 2,
                    };
            }
            impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                    Self { builder }
                }
            }

            impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
                fn from(builder: Builder<'a>) -> Self {
                    Self::Struct(::capnp::dynamic_struct::Builder::new(
                        builder.builder,
                        ::capnp::schema::StructSchema::new(
                            ::capnp::introspect::RawBrandedStructSchema {
                                generic: &_private::RAW_SCHEMA,
                                field_types: _private::get_field_types,
                                annotation_types: _private::get_annotation_types,
                            },
                        ),
                    ))
                }
            }

            impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                    self.builder
                        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                }
            }

            impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                fn init_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    _size: u32,
                ) -> Self {
                    builder
                        .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                        .into()
                }
                fn get_from_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    default: ::core::option::Option<&'a [::capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(
                        builder
                            .get_struct(
                                <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                default,
                            )?
                            .into(),
                    )
                }
            }

            impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                fn set_pointer_builder(
                    mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                    value: Self,
                    canonicalize: bool,
                ) -> ::capnp::Result<()> {
                    pointer.set_struct(&value.reader, canonicalize)
                }
            }

            impl<'a> Builder<'a> {
                pub fn into_reader(self) -> Reader<'a> {
                    self.builder.into_reader().into()
                }
                pub fn reborrow(&mut self) -> Builder<'_> {
                    Builder {
                        builder: self.builder.reborrow(),
                    }
                }
                pub fn reborrow_as_reader(&self) -> Reader<'_> {
                    self.builder.as_reader().into()
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.builder.as_reader().total_size()
                }
                #[inline]
                pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(0),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_name(&self) -> bool {
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn get_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_type(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(1).set_text(value);
                }
                #[inline]
                pub fn init_type(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.get_pointer_field(1).init_text(size)
                }
                #[inline]
                pub fn has_type(&self) -> bool {
                    !self.builder.is_pointer_field_null(1)
                }
            }

            pub struct Pipeline {
                _typeless: ::capnp::any_pointer::Pipeline,
            }
            impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                    Self {
                        _typeless: typeless,
                    }
                }
            }
            impl Pipeline {}
            mod _private {
                pub static ENCODED_NODE: [::capnp::Word; 50] = [
                    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
                    ::capnp::word(159, 234, 192, 22, 67, 0, 34, 151),
                    ::capnp::word(35, 0, 0, 0, 1, 0, 0, 0),
                    ::capnp::word(72, 250, 180, 76, 230, 36, 250, 173),
                    ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(21, 0, 0, 0, 114, 1, 0, 0),
                    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(37, 0, 0, 0, 119, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
                    ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
                    ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
                    ::capnp::word(58, 84, 120, 46, 82, 101, 99, 111),
                    ::capnp::word(114, 100, 46, 80, 114, 105, 109, 97),
                    ::capnp::word(114, 121, 75, 101, 121, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
                    ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
                    ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
                    ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
                    ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
                    ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
                    ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ];
                pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
                    match index {
                        0 => {
                            <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect()
                        }
                        1 => {
                            <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect()
                        }
                        _ => panic!("invalid field index {}", index),
                    }
                }
                pub fn get_annotation_types(
                    child_index: Option<u16>,
                    index: u32,
                ) -> ::capnp::introspect::Type {
                    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
                }
                pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
                    ::capnp::introspect::RawStructSchema {
                        encoded_node: &ENCODED_NODE,
                        nonunion_members: NONUNION_MEMBERS,
                        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
                    };
                pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
                pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
                pub const TYPE_ID: u64 = 0x9722_0043_16c0_ea9f;
            }
        }
    }
}

pub mod schema {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_columns(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<
                'a,
                crate::schema::definitions_capnp::schema::column::Owned,
            >,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_columns(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_columns(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<
                'a,
                crate::schema::definitions_capnp::schema::column::Owned,
            >,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_columns(
            &mut self,
            value: ::capnp::struct_list::Reader<
                'a,
                crate::schema::definitions_capnp::schema::column::Owned,
            >,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_columns(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<
            'a,
            crate::schema::definitions_capnp::schema::column::Owned,
        > {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_columns(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 40] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(67, 198, 188, 198, 149, 50, 198, 178),
            ::capnp::word(25, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(219, 231, 182, 117, 39, 218, 73, 140),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
            ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 63, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
            ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
            ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
            ::capnp::word(58, 83, 99, 104, 101, 109, 97, 0),
            ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(90, 26, 190, 80, 220, 51, 238, 198),
            ::capnp::word(1, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(67, 111, 108, 117, 109, 110, 0, 0),
            ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 66, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(36, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(99, 111, 108, 117, 109, 110, 115, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(90, 26, 190, 80, 220, 51, 238, 198),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <::capnp::struct_list::Owned<
                    crate::schema::definitions_capnp::schema::column::Owned,
                > as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xb2c6_3295_c6bc_c643;
    }

    pub mod column {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::introspect::Introspect for Owned {
            fn introspect() -> ::capnp::introspect::Type {
                ::capnp::introspect::TypeVariant::Struct(
                    ::capnp::introspect::RawBrandedStructSchema {
                        generic: &_private::RAW_SCHEMA,
                        field_types: _private::get_field_types,
                        annotation_types: _private::get_annotation_types,
                    },
                )
                .into()
            }
        }
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }
        impl<'a> ::core::marker::Copy for Reader<'a> {}
        impl<'a> ::core::clone::Clone for Reader<'a> {
            fn clone(&self) -> Self {
                *self
            }
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
            fn from(reader: Reader<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Reader::new(
                    reader.reader,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        impl<'a> ::core::fmt::Debug for Reader<'a> {
            fn fmt(
                &self,
                f: &mut ::core::fmt::Formatter<'_>,
            ) -> ::core::result::Result<(), ::core::fmt::Error> {
                core::fmt::Debug::fmt(
                    &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                    f,
                )
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn get_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_type(&self) -> bool {
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn get_is_nullable(self) -> bool {
                self.reader.get_bool_field(0)
            }
            #[inline]
            pub fn get_is_part_of_primary_key(self) -> bool {
                self.reader.get_bool_field(1)
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
            fn from(builder: Builder<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Builder::new(
                    builder.builder,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn get_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_type(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_type(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_type(&self) -> bool {
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn get_is_nullable(self) -> bool {
                self.builder.get_bool_field(0)
            }
            #[inline]
            pub fn set_is_nullable(&mut self, value: bool) {
                self.builder.set_bool_field(0, value);
            }
            #[inline]
            pub fn get_is_part_of_primary_key(self) -> bool {
                self.builder.get_bool_field(1)
            }
            #[inline]
            pub fn set_is_part_of_primary_key(&mut self, value: bool) {
                self.builder.set_bool_field(1, value);
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub static ENCODED_NODE: [::capnp::Word; 82] = [
                ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
                ::capnp::word(90, 26, 190, 80, 220, 51, 238, 198),
                ::capnp::word(32, 0, 0, 0, 1, 0, 1, 0),
                ::capnp::word(67, 198, 188, 198, 149, 50, 198, 178),
                ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(21, 0, 0, 0, 58, 1, 0, 0),
                ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(33, 0, 0, 0, 231, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
                ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
                ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
                ::capnp::word(58, 83, 99, 104, 101, 109, 97, 46),
                ::capnp::word(67, 111, 108, 117, 109, 110, 0, 0),
                ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
                ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(97, 0, 0, 0, 42, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(101, 0, 0, 0, 42, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(105, 0, 0, 0, 90, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(113, 0, 0, 0, 154, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(116, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(128, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(105, 115, 78, 117, 108, 108, 97, 98),
                ::capnp::word(108, 101, 0, 0, 0, 0, 0, 0),
                ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(105, 115, 80, 97, 114, 116, 79, 102),
                ::capnp::word(80, 114, 105, 109, 97, 114, 121, 75),
                ::capnp::word(101, 121, 0, 0, 0, 0, 0, 0),
                ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ];
            pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
                match index {
                    0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    2 => <bool as ::capnp::introspect::Introspect>::introspect(),
                    3 => <bool as ::capnp::introspect::Introspect>::introspect(),
                    _ => panic!("invalid field index {}", index),
                }
            }
            pub fn get_annotation_types(
                child_index: Option<u16>,
                index: u32,
            ) -> ::capnp::introspect::Type {
                panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
            }
            pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
                ::capnp::introspect::RawStructSchema {
                    encoded_node: &ENCODED_NODE,
                    nonunion_members: NONUNION_MEMBERS,
                    members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
                };
            pub static NONUNION_MEMBERS: &[u16] = &[0, 1, 2, 3];
            pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
            pub const TYPE_ID: u64 = 0xc6ee_33dc_50be_1a5a;
        }
    }
}

pub mod deal_info {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_cid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_cid(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_size(self) -> u32 {
            self.reader.get_data_field::<u32>(0)
        }
        #[inline]
        pub fn get_created(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_created(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_archived(self) -> bool {
            self.reader.get_bool_field(32)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 2,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_cid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_cid(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_cid(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_cid(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_size(self) -> u32 {
            self.builder.get_data_field::<u32>(0)
        }
        #[inline]
        pub fn set_size(&mut self, value: u32) {
            self.builder.set_data_field::<u32>(0, value);
        }
        #[inline]
        pub fn get_created(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_created(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_text(value);
        }
        #[inline]
        pub fn init_created(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(1).init_text(size)
        }
        #[inline]
        pub fn has_created(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn get_archived(self) -> bool {
            self.builder.get_bool_field(32)
        }
        #[inline]
        pub fn set_archived(&mut self, value: bool) {
            self.builder.set_bool_field(32, value);
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 80] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(134, 40, 187, 117, 196, 247, 155, 198),
            ::capnp::word(25, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(219, 231, 182, 117, 39, 218, 73, 140),
            ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
            ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(33, 0, 0, 0, 231, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(115, 99, 104, 101, 109, 97, 47, 100),
            ::capnp::word(101, 102, 105, 110, 105, 116, 105, 111),
            ::capnp::word(110, 115, 46, 99, 97, 112, 110, 112),
            ::capnp::word(58, 68, 101, 97, 108, 73, 110, 102),
            ::capnp::word(111, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(97, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(101, 0, 0, 0, 42, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(105, 0, 0, 0, 66, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(100, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(3, 0, 0, 0, 32, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 0, 0, 0, 74, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(108, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(99, 105, 100, 0, 0, 0, 0, 0),
            ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(115, 105, 122, 101, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(99, 114, 101, 97, 116, 101, 100, 0),
            ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(97, 114, 99, 104, 105, 118, 101, 100),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
                2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                3 => <bool as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1, 2, 3];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xc69b_f7c4_75bb_2886;
    }
}
